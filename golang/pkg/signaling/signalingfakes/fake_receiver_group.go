// Code generated by counterfeiter. DO NOT EDIT.
package signalingfakes

import (
	"sync"

	"github.com/ryanrolds/club/pkg/signaling"
)

type FakeReceiverGroup struct {
	AddDependentStub        func(signaling.ReceiverNode)
	addDependentMutex       sync.RWMutex
	addDependentArgsForCall []struct {
		arg1 signaling.ReceiverNode
	}
	BroadcastStub        func(signaling.Message)
	broadcastMutex       sync.RWMutex
	broadcastArgsForCall []struct {
		arg1 signaling.Message
	}
	GetDependentStub        func(signaling.NodeID) signaling.ReceiverNode
	getDependentMutex       sync.RWMutex
	getDependentArgsForCall []struct {
		arg1 signaling.NodeID
	}
	getDependentReturns struct {
		result1 signaling.ReceiverNode
	}
	getDependentReturnsOnCall map[int]struct {
		result1 signaling.ReceiverNode
	}
	GetParentStub        func() signaling.ReceiverNode
	getParentMutex       sync.RWMutex
	getParentArgsForCall []struct {
	}
	getParentReturns struct {
		result1 signaling.ReceiverNode
	}
	getParentReturnsOnCall map[int]struct {
		result1 signaling.ReceiverNode
	}
	IDStub        func() signaling.NodeID
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 signaling.NodeID
	}
	iDReturnsOnCall map[int]struct {
		result1 signaling.NodeID
	}
	MessageDependentStub        func(signaling.Message)
	messageDependentMutex       sync.RWMutex
	messageDependentArgsForCall []struct {
		arg1 signaling.Message
	}
	ReceiveStub        func(signaling.Message)
	receiveMutex       sync.RWMutex
	receiveArgsForCall []struct {
		arg1 signaling.Message
	}
	RemoveDependentStub        func(signaling.ReceiverNode)
	removeDependentMutex       sync.RWMutex
	removeDependentArgsForCall []struct {
		arg1 signaling.ReceiverNode
	}
	SetParentStub        func(signaling.ReceiverNode)
	setParentMutex       sync.RWMutex
	setParentArgsForCall []struct {
		arg1 signaling.ReceiverNode
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReceiverGroup) AddDependent(arg1 signaling.ReceiverNode) {
	fake.addDependentMutex.Lock()
	fake.addDependentArgsForCall = append(fake.addDependentArgsForCall, struct {
		arg1 signaling.ReceiverNode
	}{arg1})
	fake.recordInvocation("AddDependent", []interface{}{arg1})
	fake.addDependentMutex.Unlock()
	if fake.AddDependentStub != nil {
		fake.AddDependentStub(arg1)
	}
}

func (fake *FakeReceiverGroup) AddDependentCallCount() int {
	fake.addDependentMutex.RLock()
	defer fake.addDependentMutex.RUnlock()
	return len(fake.addDependentArgsForCall)
}

func (fake *FakeReceiverGroup) AddDependentCalls(stub func(signaling.ReceiverNode)) {
	fake.addDependentMutex.Lock()
	defer fake.addDependentMutex.Unlock()
	fake.AddDependentStub = stub
}

func (fake *FakeReceiverGroup) AddDependentArgsForCall(i int) signaling.ReceiverNode {
	fake.addDependentMutex.RLock()
	defer fake.addDependentMutex.RUnlock()
	argsForCall := fake.addDependentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) Broadcast(arg1 signaling.Message) {
	fake.broadcastMutex.Lock()
	fake.broadcastArgsForCall = append(fake.broadcastArgsForCall, struct {
		arg1 signaling.Message
	}{arg1})
	fake.recordInvocation("Broadcast", []interface{}{arg1})
	fake.broadcastMutex.Unlock()
	if fake.BroadcastStub != nil {
		fake.BroadcastStub(arg1)
	}
}

func (fake *FakeReceiverGroup) BroadcastCallCount() int {
	fake.broadcastMutex.RLock()
	defer fake.broadcastMutex.RUnlock()
	return len(fake.broadcastArgsForCall)
}

func (fake *FakeReceiverGroup) BroadcastCalls(stub func(signaling.Message)) {
	fake.broadcastMutex.Lock()
	defer fake.broadcastMutex.Unlock()
	fake.BroadcastStub = stub
}

func (fake *FakeReceiverGroup) BroadcastArgsForCall(i int) signaling.Message {
	fake.broadcastMutex.RLock()
	defer fake.broadcastMutex.RUnlock()
	argsForCall := fake.broadcastArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) GetDependent(arg1 signaling.NodeID) signaling.ReceiverNode {
	fake.getDependentMutex.Lock()
	ret, specificReturn := fake.getDependentReturnsOnCall[len(fake.getDependentArgsForCall)]
	fake.getDependentArgsForCall = append(fake.getDependentArgsForCall, struct {
		arg1 signaling.NodeID
	}{arg1})
	fake.recordInvocation("GetDependent", []interface{}{arg1})
	fake.getDependentMutex.Unlock()
	if fake.GetDependentStub != nil {
		return fake.GetDependentStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getDependentReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) GetDependentCallCount() int {
	fake.getDependentMutex.RLock()
	defer fake.getDependentMutex.RUnlock()
	return len(fake.getDependentArgsForCall)
}

func (fake *FakeReceiverGroup) GetDependentCalls(stub func(signaling.NodeID) signaling.ReceiverNode) {
	fake.getDependentMutex.Lock()
	defer fake.getDependentMutex.Unlock()
	fake.GetDependentStub = stub
}

func (fake *FakeReceiverGroup) GetDependentArgsForCall(i int) signaling.NodeID {
	fake.getDependentMutex.RLock()
	defer fake.getDependentMutex.RUnlock()
	argsForCall := fake.getDependentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) GetDependentReturns(result1 signaling.ReceiverNode) {
	fake.getDependentMutex.Lock()
	defer fake.getDependentMutex.Unlock()
	fake.GetDependentStub = nil
	fake.getDependentReturns = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) GetDependentReturnsOnCall(i int, result1 signaling.ReceiverNode) {
	fake.getDependentMutex.Lock()
	defer fake.getDependentMutex.Unlock()
	fake.GetDependentStub = nil
	if fake.getDependentReturnsOnCall == nil {
		fake.getDependentReturnsOnCall = make(map[int]struct {
			result1 signaling.ReceiverNode
		})
	}
	fake.getDependentReturnsOnCall[i] = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) GetParent() signaling.ReceiverNode {
	fake.getParentMutex.Lock()
	ret, specificReturn := fake.getParentReturnsOnCall[len(fake.getParentArgsForCall)]
	fake.getParentArgsForCall = append(fake.getParentArgsForCall, struct {
	}{})
	fake.recordInvocation("GetParent", []interface{}{})
	fake.getParentMutex.Unlock()
	if fake.GetParentStub != nil {
		return fake.GetParentStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getParentReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) GetParentCallCount() int {
	fake.getParentMutex.RLock()
	defer fake.getParentMutex.RUnlock()
	return len(fake.getParentArgsForCall)
}

func (fake *FakeReceiverGroup) GetParentCalls(stub func() signaling.ReceiverNode) {
	fake.getParentMutex.Lock()
	defer fake.getParentMutex.Unlock()
	fake.GetParentStub = stub
}

func (fake *FakeReceiverGroup) GetParentReturns(result1 signaling.ReceiverNode) {
	fake.getParentMutex.Lock()
	defer fake.getParentMutex.Unlock()
	fake.GetParentStub = nil
	fake.getParentReturns = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) GetParentReturnsOnCall(i int, result1 signaling.ReceiverNode) {
	fake.getParentMutex.Lock()
	defer fake.getParentMutex.Unlock()
	fake.GetParentStub = nil
	if fake.getParentReturnsOnCall == nil {
		fake.getParentReturnsOnCall = make(map[int]struct {
			result1 signaling.ReceiverNode
		})
	}
	fake.getParentReturnsOnCall[i] = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) ID() signaling.NodeID {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeReceiverGroup) IDCalls(stub func() signaling.NodeID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeReceiverGroup) IDReturns(result1 signaling.NodeID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 signaling.NodeID
	}{result1}
}

func (fake *FakeReceiverGroup) IDReturnsOnCall(i int, result1 signaling.NodeID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 signaling.NodeID
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 signaling.NodeID
	}{result1}
}

func (fake *FakeReceiverGroup) MessageDependent(arg1 signaling.Message) {
	fake.messageDependentMutex.Lock()
	fake.messageDependentArgsForCall = append(fake.messageDependentArgsForCall, struct {
		arg1 signaling.Message
	}{arg1})
	fake.recordInvocation("MessageDependent", []interface{}{arg1})
	fake.messageDependentMutex.Unlock()
	if fake.MessageDependentStub != nil {
		fake.MessageDependentStub(arg1)
	}
}

func (fake *FakeReceiverGroup) MessageDependentCallCount() int {
	fake.messageDependentMutex.RLock()
	defer fake.messageDependentMutex.RUnlock()
	return len(fake.messageDependentArgsForCall)
}

func (fake *FakeReceiverGroup) MessageDependentCalls(stub func(signaling.Message)) {
	fake.messageDependentMutex.Lock()
	defer fake.messageDependentMutex.Unlock()
	fake.MessageDependentStub = stub
}

func (fake *FakeReceiverGroup) MessageDependentArgsForCall(i int) signaling.Message {
	fake.messageDependentMutex.RLock()
	defer fake.messageDependentMutex.RUnlock()
	argsForCall := fake.messageDependentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) Receive(arg1 signaling.Message) {
	fake.receiveMutex.Lock()
	fake.receiveArgsForCall = append(fake.receiveArgsForCall, struct {
		arg1 signaling.Message
	}{arg1})
	fake.recordInvocation("Receive", []interface{}{arg1})
	fake.receiveMutex.Unlock()
	if fake.ReceiveStub != nil {
		fake.ReceiveStub(arg1)
	}
}

func (fake *FakeReceiverGroup) ReceiveCallCount() int {
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	return len(fake.receiveArgsForCall)
}

func (fake *FakeReceiverGroup) ReceiveCalls(stub func(signaling.Message)) {
	fake.receiveMutex.Lock()
	defer fake.receiveMutex.Unlock()
	fake.ReceiveStub = stub
}

func (fake *FakeReceiverGroup) ReceiveArgsForCall(i int) signaling.Message {
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	argsForCall := fake.receiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) RemoveDependent(arg1 signaling.ReceiverNode) {
	fake.removeDependentMutex.Lock()
	fake.removeDependentArgsForCall = append(fake.removeDependentArgsForCall, struct {
		arg1 signaling.ReceiverNode
	}{arg1})
	fake.recordInvocation("RemoveDependent", []interface{}{arg1})
	fake.removeDependentMutex.Unlock()
	if fake.RemoveDependentStub != nil {
		fake.RemoveDependentStub(arg1)
	}
}

func (fake *FakeReceiverGroup) RemoveDependentCallCount() int {
	fake.removeDependentMutex.RLock()
	defer fake.removeDependentMutex.RUnlock()
	return len(fake.removeDependentArgsForCall)
}

func (fake *FakeReceiverGroup) RemoveDependentCalls(stub func(signaling.ReceiverNode)) {
	fake.removeDependentMutex.Lock()
	defer fake.removeDependentMutex.Unlock()
	fake.RemoveDependentStub = stub
}

func (fake *FakeReceiverGroup) RemoveDependentArgsForCall(i int) signaling.ReceiverNode {
	fake.removeDependentMutex.RLock()
	defer fake.removeDependentMutex.RUnlock()
	argsForCall := fake.removeDependentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) SetParent(arg1 signaling.ReceiverNode) {
	fake.setParentMutex.Lock()
	fake.setParentArgsForCall = append(fake.setParentArgsForCall, struct {
		arg1 signaling.ReceiverNode
	}{arg1})
	fake.recordInvocation("SetParent", []interface{}{arg1})
	fake.setParentMutex.Unlock()
	if fake.SetParentStub != nil {
		fake.SetParentStub(arg1)
	}
}

func (fake *FakeReceiverGroup) SetParentCallCount() int {
	fake.setParentMutex.RLock()
	defer fake.setParentMutex.RUnlock()
	return len(fake.setParentArgsForCall)
}

func (fake *FakeReceiverGroup) SetParentCalls(stub func(signaling.ReceiverNode)) {
	fake.setParentMutex.Lock()
	defer fake.setParentMutex.Unlock()
	fake.SetParentStub = stub
}

func (fake *FakeReceiverGroup) SetParentArgsForCall(i int) signaling.ReceiverNode {
	fake.setParentMutex.RLock()
	defer fake.setParentMutex.RUnlock()
	argsForCall := fake.setParentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addDependentMutex.RLock()
	defer fake.addDependentMutex.RUnlock()
	fake.broadcastMutex.RLock()
	defer fake.broadcastMutex.RUnlock()
	fake.getDependentMutex.RLock()
	defer fake.getDependentMutex.RUnlock()
	fake.getParentMutex.RLock()
	defer fake.getParentMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.messageDependentMutex.RLock()
	defer fake.messageDependentMutex.RUnlock()
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	fake.removeDependentMutex.RLock()
	defer fake.removeDependentMutex.RUnlock()
	fake.setParentMutex.RLock()
	defer fake.setParentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReceiverGroup) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ signaling.ReceiverGroup = new(FakeReceiverGroup)
