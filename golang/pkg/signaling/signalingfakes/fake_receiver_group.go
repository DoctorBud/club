// Code generated by counterfeiter. DO NOT EDIT.
package signalingfakes

import (
	"sync"

	"github.com/ryanrolds/club/pkg/signaling"
)

type FakeReceiverGroup struct {
	AddMemberStub        func(signaling.ReceiverNode)
	addMemberMutex       sync.RWMutex
	addMemberArgsForCall []struct {
		arg1 signaling.ReceiverNode
	}
	BroadcastStub        func(signaling.Message)
	broadcastMutex       sync.RWMutex
	broadcastArgsForCall []struct {
		arg1 signaling.Message
	}
	GetDetailsStub        func() signaling.GroupDetails
	getDetailsMutex       sync.RWMutex
	getDetailsArgsForCall []struct {
	}
	getDetailsReturns struct {
		result1 signaling.GroupDetails
	}
	getDetailsReturnsOnCall map[int]struct {
		result1 signaling.GroupDetails
	}
	GetMemberStub        func(signaling.NodeID) signaling.ReceiverNode
	getMemberMutex       sync.RWMutex
	getMemberArgsForCall []struct {
		arg1 signaling.NodeID
	}
	getMemberReturns struct {
		result1 signaling.ReceiverNode
	}
	getMemberReturnsOnCall map[int]struct {
		result1 signaling.ReceiverNode
	}
	GetParentStub        func() signaling.ReceiverNode
	getParentMutex       sync.RWMutex
	getParentArgsForCall []struct {
	}
	getParentReturns struct {
		result1 signaling.ReceiverNode
	}
	getParentReturnsOnCall map[int]struct {
		result1 signaling.ReceiverNode
	}
	IDStub        func() signaling.NodeID
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 signaling.NodeID
	}
	iDReturnsOnCall map[int]struct {
		result1 signaling.NodeID
	}
	MessageMemberStub        func(signaling.Message)
	messageMemberMutex       sync.RWMutex
	messageMemberArgsForCall []struct {
		arg1 signaling.Message
	}
	ReceiveStub        func(signaling.Message)
	receiveMutex       sync.RWMutex
	receiveArgsForCall []struct {
		arg1 signaling.Message
	}
	RemoveMemberStub        func(signaling.ReceiverNode)
	removeMemberMutex       sync.RWMutex
	removeMemberArgsForCall []struct {
		arg1 signaling.ReceiverNode
	}
	SetParentStub        func(signaling.ReceiverNode)
	setParentMutex       sync.RWMutex
	setParentArgsForCall []struct {
		arg1 signaling.ReceiverNode
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReceiverGroup) AddMember(arg1 signaling.ReceiverNode) {
	fake.addMemberMutex.Lock()
	fake.addMemberArgsForCall = append(fake.addMemberArgsForCall, struct {
		arg1 signaling.ReceiverNode
	}{arg1})
	fake.recordInvocation("AddMember", []interface{}{arg1})
	fake.addMemberMutex.Unlock()
	if fake.AddMemberStub != nil {
		fake.AddMemberStub(arg1)
	}
}

func (fake *FakeReceiverGroup) AddMemberCallCount() int {
	fake.addMemberMutex.RLock()
	defer fake.addMemberMutex.RUnlock()
	return len(fake.addMemberArgsForCall)
}

func (fake *FakeReceiverGroup) AddMemberCalls(stub func(signaling.ReceiverNode)) {
	fake.addMemberMutex.Lock()
	defer fake.addMemberMutex.Unlock()
	fake.AddMemberStub = stub
}

func (fake *FakeReceiverGroup) AddMemberArgsForCall(i int) signaling.ReceiverNode {
	fake.addMemberMutex.RLock()
	defer fake.addMemberMutex.RUnlock()
	argsForCall := fake.addMemberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) Broadcast(arg1 signaling.Message) {
	fake.broadcastMutex.Lock()
	fake.broadcastArgsForCall = append(fake.broadcastArgsForCall, struct {
		arg1 signaling.Message
	}{arg1})
	fake.recordInvocation("Broadcast", []interface{}{arg1})
	fake.broadcastMutex.Unlock()
	if fake.BroadcastStub != nil {
		fake.BroadcastStub(arg1)
	}
}

func (fake *FakeReceiverGroup) BroadcastCallCount() int {
	fake.broadcastMutex.RLock()
	defer fake.broadcastMutex.RUnlock()
	return len(fake.broadcastArgsForCall)
}

func (fake *FakeReceiverGroup) BroadcastCalls(stub func(signaling.Message)) {
	fake.broadcastMutex.Lock()
	defer fake.broadcastMutex.Unlock()
	fake.BroadcastStub = stub
}

func (fake *FakeReceiverGroup) BroadcastArgsForCall(i int) signaling.Message {
	fake.broadcastMutex.RLock()
	defer fake.broadcastMutex.RUnlock()
	argsForCall := fake.broadcastArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) GetDetails() signaling.GroupDetails {
	fake.getDetailsMutex.Lock()
	ret, specificReturn := fake.getDetailsReturnsOnCall[len(fake.getDetailsArgsForCall)]
	fake.getDetailsArgsForCall = append(fake.getDetailsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetDetails", []interface{}{})
	fake.getDetailsMutex.Unlock()
	if fake.GetDetailsStub != nil {
		return fake.GetDetailsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getDetailsReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) GetDetailsCallCount() int {
	fake.getDetailsMutex.RLock()
	defer fake.getDetailsMutex.RUnlock()
	return len(fake.getDetailsArgsForCall)
}

func (fake *FakeReceiverGroup) GetDetailsCalls(stub func() signaling.GroupDetails) {
	fake.getDetailsMutex.Lock()
	defer fake.getDetailsMutex.Unlock()
	fake.GetDetailsStub = stub
}

func (fake *FakeReceiverGroup) GetDetailsReturns(result1 signaling.GroupDetails) {
	fake.getDetailsMutex.Lock()
	defer fake.getDetailsMutex.Unlock()
	fake.GetDetailsStub = nil
	fake.getDetailsReturns = struct {
		result1 signaling.GroupDetails
	}{result1}
}

func (fake *FakeReceiverGroup) GetDetailsReturnsOnCall(i int, result1 signaling.GroupDetails) {
	fake.getDetailsMutex.Lock()
	defer fake.getDetailsMutex.Unlock()
	fake.GetDetailsStub = nil
	if fake.getDetailsReturnsOnCall == nil {
		fake.getDetailsReturnsOnCall = make(map[int]struct {
			result1 signaling.GroupDetails
		})
	}
	fake.getDetailsReturnsOnCall[i] = struct {
		result1 signaling.GroupDetails
	}{result1}
}

func (fake *FakeReceiverGroup) GetMember(arg1 signaling.NodeID) signaling.ReceiverNode {
	fake.getMemberMutex.Lock()
	ret, specificReturn := fake.getMemberReturnsOnCall[len(fake.getMemberArgsForCall)]
	fake.getMemberArgsForCall = append(fake.getMemberArgsForCall, struct {
		arg1 signaling.NodeID
	}{arg1})
	fake.recordInvocation("GetMember", []interface{}{arg1})
	fake.getMemberMutex.Unlock()
	if fake.GetMemberStub != nil {
		return fake.GetMemberStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getMemberReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) GetMemberCallCount() int {
	fake.getMemberMutex.RLock()
	defer fake.getMemberMutex.RUnlock()
	return len(fake.getMemberArgsForCall)
}

func (fake *FakeReceiverGroup) GetMemberCalls(stub func(signaling.NodeID) signaling.ReceiverNode) {
	fake.getMemberMutex.Lock()
	defer fake.getMemberMutex.Unlock()
	fake.GetMemberStub = stub
}

func (fake *FakeReceiverGroup) GetMemberArgsForCall(i int) signaling.NodeID {
	fake.getMemberMutex.RLock()
	defer fake.getMemberMutex.RUnlock()
	argsForCall := fake.getMemberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) GetMemberReturns(result1 signaling.ReceiverNode) {
	fake.getMemberMutex.Lock()
	defer fake.getMemberMutex.Unlock()
	fake.GetMemberStub = nil
	fake.getMemberReturns = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) GetMemberReturnsOnCall(i int, result1 signaling.ReceiverNode) {
	fake.getMemberMutex.Lock()
	defer fake.getMemberMutex.Unlock()
	fake.GetMemberStub = nil
	if fake.getMemberReturnsOnCall == nil {
		fake.getMemberReturnsOnCall = make(map[int]struct {
			result1 signaling.ReceiverNode
		})
	}
	fake.getMemberReturnsOnCall[i] = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) GetParent() signaling.ReceiverNode {
	fake.getParentMutex.Lock()
	ret, specificReturn := fake.getParentReturnsOnCall[len(fake.getParentArgsForCall)]
	fake.getParentArgsForCall = append(fake.getParentArgsForCall, struct {
	}{})
	fake.recordInvocation("GetParent", []interface{}{})
	fake.getParentMutex.Unlock()
	if fake.GetParentStub != nil {
		return fake.GetParentStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getParentReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) GetParentCallCount() int {
	fake.getParentMutex.RLock()
	defer fake.getParentMutex.RUnlock()
	return len(fake.getParentArgsForCall)
}

func (fake *FakeReceiverGroup) GetParentCalls(stub func() signaling.ReceiverNode) {
	fake.getParentMutex.Lock()
	defer fake.getParentMutex.Unlock()
	fake.GetParentStub = stub
}

func (fake *FakeReceiverGroup) GetParentReturns(result1 signaling.ReceiverNode) {
	fake.getParentMutex.Lock()
	defer fake.getParentMutex.Unlock()
	fake.GetParentStub = nil
	fake.getParentReturns = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) GetParentReturnsOnCall(i int, result1 signaling.ReceiverNode) {
	fake.getParentMutex.Lock()
	defer fake.getParentMutex.Unlock()
	fake.GetParentStub = nil
	if fake.getParentReturnsOnCall == nil {
		fake.getParentReturnsOnCall = make(map[int]struct {
			result1 signaling.ReceiverNode
		})
	}
	fake.getParentReturnsOnCall[i] = struct {
		result1 signaling.ReceiverNode
	}{result1}
}

func (fake *FakeReceiverGroup) ID() signaling.NodeID {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.iDReturns
	return fakeReturns.result1
}

func (fake *FakeReceiverGroup) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeReceiverGroup) IDCalls(stub func() signaling.NodeID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeReceiverGroup) IDReturns(result1 signaling.NodeID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 signaling.NodeID
	}{result1}
}

func (fake *FakeReceiverGroup) IDReturnsOnCall(i int, result1 signaling.NodeID) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 signaling.NodeID
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 signaling.NodeID
	}{result1}
}

func (fake *FakeReceiverGroup) MessageMember(arg1 signaling.Message) {
	fake.messageMemberMutex.Lock()
	fake.messageMemberArgsForCall = append(fake.messageMemberArgsForCall, struct {
		arg1 signaling.Message
	}{arg1})
	fake.recordInvocation("MessageMember", []interface{}{arg1})
	fake.messageMemberMutex.Unlock()
	if fake.MessageMemberStub != nil {
		fake.MessageMemberStub(arg1)
	}
}

func (fake *FakeReceiverGroup) MessageMemberCallCount() int {
	fake.messageMemberMutex.RLock()
	defer fake.messageMemberMutex.RUnlock()
	return len(fake.messageMemberArgsForCall)
}

func (fake *FakeReceiverGroup) MessageMemberCalls(stub func(signaling.Message)) {
	fake.messageMemberMutex.Lock()
	defer fake.messageMemberMutex.Unlock()
	fake.MessageMemberStub = stub
}

func (fake *FakeReceiverGroup) MessageMemberArgsForCall(i int) signaling.Message {
	fake.messageMemberMutex.RLock()
	defer fake.messageMemberMutex.RUnlock()
	argsForCall := fake.messageMemberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) Receive(arg1 signaling.Message) {
	fake.receiveMutex.Lock()
	fake.receiveArgsForCall = append(fake.receiveArgsForCall, struct {
		arg1 signaling.Message
	}{arg1})
	fake.recordInvocation("Receive", []interface{}{arg1})
	fake.receiveMutex.Unlock()
	if fake.ReceiveStub != nil {
		fake.ReceiveStub(arg1)
	}
}

func (fake *FakeReceiverGroup) ReceiveCallCount() int {
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	return len(fake.receiveArgsForCall)
}

func (fake *FakeReceiverGroup) ReceiveCalls(stub func(signaling.Message)) {
	fake.receiveMutex.Lock()
	defer fake.receiveMutex.Unlock()
	fake.ReceiveStub = stub
}

func (fake *FakeReceiverGroup) ReceiveArgsForCall(i int) signaling.Message {
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	argsForCall := fake.receiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) RemoveMember(arg1 signaling.ReceiverNode) {
	fake.removeMemberMutex.Lock()
	fake.removeMemberArgsForCall = append(fake.removeMemberArgsForCall, struct {
		arg1 signaling.ReceiverNode
	}{arg1})
	fake.recordInvocation("RemoveMember", []interface{}{arg1})
	fake.removeMemberMutex.Unlock()
	if fake.RemoveMemberStub != nil {
		fake.RemoveMemberStub(arg1)
	}
}

func (fake *FakeReceiverGroup) RemoveMemberCallCount() int {
	fake.removeMemberMutex.RLock()
	defer fake.removeMemberMutex.RUnlock()
	return len(fake.removeMemberArgsForCall)
}

func (fake *FakeReceiverGroup) RemoveMemberCalls(stub func(signaling.ReceiverNode)) {
	fake.removeMemberMutex.Lock()
	defer fake.removeMemberMutex.Unlock()
	fake.RemoveMemberStub = stub
}

func (fake *FakeReceiverGroup) RemoveMemberArgsForCall(i int) signaling.ReceiverNode {
	fake.removeMemberMutex.RLock()
	defer fake.removeMemberMutex.RUnlock()
	argsForCall := fake.removeMemberArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) SetParent(arg1 signaling.ReceiverNode) {
	fake.setParentMutex.Lock()
	fake.setParentArgsForCall = append(fake.setParentArgsForCall, struct {
		arg1 signaling.ReceiverNode
	}{arg1})
	fake.recordInvocation("SetParent", []interface{}{arg1})
	fake.setParentMutex.Unlock()
	if fake.SetParentStub != nil {
		fake.SetParentStub(arg1)
	}
}

func (fake *FakeReceiverGroup) SetParentCallCount() int {
	fake.setParentMutex.RLock()
	defer fake.setParentMutex.RUnlock()
	return len(fake.setParentArgsForCall)
}

func (fake *FakeReceiverGroup) SetParentCalls(stub func(signaling.ReceiverNode)) {
	fake.setParentMutex.Lock()
	defer fake.setParentMutex.Unlock()
	fake.SetParentStub = stub
}

func (fake *FakeReceiverGroup) SetParentArgsForCall(i int) signaling.ReceiverNode {
	fake.setParentMutex.RLock()
	defer fake.setParentMutex.RUnlock()
	argsForCall := fake.setParentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiverGroup) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMemberMutex.RLock()
	defer fake.addMemberMutex.RUnlock()
	fake.broadcastMutex.RLock()
	defer fake.broadcastMutex.RUnlock()
	fake.getDetailsMutex.RLock()
	defer fake.getDetailsMutex.RUnlock()
	fake.getMemberMutex.RLock()
	defer fake.getMemberMutex.RUnlock()
	fake.getParentMutex.RLock()
	defer fake.getParentMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.messageMemberMutex.RLock()
	defer fake.messageMemberMutex.RUnlock()
	fake.receiveMutex.RLock()
	defer fake.receiveMutex.RUnlock()
	fake.removeMemberMutex.RLock()
	defer fake.removeMemberMutex.RUnlock()
	fake.setParentMutex.RLock()
	defer fake.setParentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReceiverGroup) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ signaling.ReceiverGroup = new(FakeReceiverGroup)
